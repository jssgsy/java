package com.univ.algorithom.sort;import java.util.Arrays;import org.junit.Test;/** * 冒泡排序(选择排序) * Created by Univ on 16/5/15. */public class BubbleSort {    @Test    public void test() {        int[] a = {3, 9, 20, 12, 4, 7, 20, 5,223,100,17};        int[] b = bubbleSort(a, 0, a.length - 1);        System.out.println(Arrays.toString(b));    }    @Test    public void moreEfficient() {        int[] a = {3, 9, 20, 12, 4, 7, 20, 5,223,100,17};        int[] b = selectSort(a, 0, a.length - 1);        System.out.println(Arrays.toString(b));    }    private int[] bubbleSort(int[] a, int lo, int hi) {        for (int i = lo; i <= hi - 1; i++) {            for (int j = 0; j +  1 <= hi - i; j++) {                if (a[j ] > a[j + 1]) {                    swap(a, j, j+1);                }            }        }        return a;    }    /**     * 更高效，因为不用每次找到一个小元素就交换，而是一圈内循环后找到最小元素的索引，然后仅需一次交换     */    int[] selectSort(int arr[], int lo, int hi) {        for (int i = 0; i < arr.length; i++) {            int minIndex = i;   // 内循环过后找到的最小元素所在位置(索引)            for (int j = i + 1; j < arr.length; j++) {                if (arr[j] < arr[minIndex]) {                    minIndex = j;                }            }            swap(arr, i, minIndex); // 内循环过后仅需此一次交换操作        }        return arr;    }    private void swap(int[] a, int i, int j) {        int temp = a[i];        a[i] = a[j];        a[j] = temp;    }    // 这种方法更直观    private int[] sortBubble(int[] arr, int lo, int hi) {        int j = hi;        while (j > 1) {            for (int i = lo; i < j; i++) {                if (arr[i] > arr[i+1]) {                    swap(arr, i, i + 1);                }            }            j--;        }        return arr;    }}